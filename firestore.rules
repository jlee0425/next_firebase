rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      match /posts/{postId} {
        allow read;
      }
      match /users/{userId} {
        allow read;
        allow create: if isValidUser(userId)
      }
      match /username/{username} {
        allow read;
        allow create: if isValidUser(username)

      }
      match /users/{userId}/posts/{postId} {
        allow read;
        allow create: if canCreatePost(userId);
        allow update: if canCreatePost(userId) || canIncrementHearts(userId, postId);
        allow delete: if request.auth.uid == userId;
      }
      match /users/{userId}/posts/{postId}/hearts/{heartId} {
        allow read;
        allow write: if request.auth.uid == userId;
      }

      function isValidUser(userId) {
        let isOwner = request.auth.uid == userId;
        let username = request.resource.data.username;
        let createdValidUsername = existsAfter(/database/$(database)/documents/usernames/$(username));

        return isOwner && createdValidUsername;
      }

      function isValidUsername(username) {
        let isOwner = request.auth.uid == request.resource.data.username;
        let isValidLength = username.size() >= 3 && username.size() <= 15;
        let isValidUserDoc = getAfter(/database/$(database)/documents/users/$(request.auth.uid).data.username == username)

        return isOwner && isValidLength && isValidUserDoc;
      }

      function canCreatePost(userId) {
        let isOwner = request.auth.uid == userId;
        let isNow = request.time == request.resource.data.createdAt;
        let isValidContent = request.resource.data.content.size() < 20000 && request.resource.data.content.heartCount == 0;
        let username = get(/database/$(database)/documents/users/$(request.auth.uid)).data.username;
        let usernameMatches = username == request.resource.data.username;

        return isOwner && isNow && isValidContent && usernameMatches;
      }

      function canUpdatePost(userId) {
        let isOwner = request.auth.uid == userId;
        let isNow = request.time == request.resource.data.updatedAt;
        let isValidContent = request.resource.data.content.size() < 20000;
        let doesNotUpdateForbidden = !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'username', 'heartCount']);

        return isOwner && isNow && isValidContent && doesNotUpdateForbidden;
      }

      function canIncrementHearts(userId, postId) {
        let hasValidFields = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['heartCount']);
        let currentUser = request.auth.uid;
        let heartDocExistsAfter = existsAfter(/database/$(database)/documents/users/$(userId)/posts/$(postId)/hearts/$(currentUser))
        let heartDocExists = exists(/database/$(database)/documents/users/$(userid)/posts/$(postId)/hearts/$(currentUser))

        let heartDocAdded = !heartDocExists && heartDocExistsAfter;
        let heartDocRemoved = heartDocExists && !heartDocExistsAfter;

        let countChange = request.resource.data.heartCount - resource.data.heartCount;
        let isValidChange = countChange == 1 || countChange == -1;

        return hasValidFields && isValidChange && (countChange == 1 ? heartDocAdded : heartDocRemoved)
      }
    }
  }
}